// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int         @id @default(autoincrement())
  email               String      @unique
  password            String
  name                String
  role                Role        @default(USER)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  ocurrences          Ocurrence[] @relation("Ocurrence_user")
  assignedOcurrences  Ocurrence[] @relation("Ocurrence_responsible")
}

enum Role {
  ADMIN
  USER
}

model Student {
  id          Int       @id @default(autoincrement())
  name        String
  class       String
  ra          String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt        
  ocurrences  StudentOnOcurrences[]
}

model Ocurrence {
  id            Int       @id @default(autoincrement())
  userId        Int
  responsibleId Int?
  description   String
  level         Levels
  status        Status    @default(OPENED)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  students      StudentOnOcurrences[]
  user          User      @relation("Ocurrence_user", fields: [userId], references: [id])
  responsible   User?     @relation("Ocurrence_responsible", fields: [responsibleId], references: [id])
}

model StudentOnOcurrences {
  studentId     Int
  ocurrenceId   Int
  ocurrence     Ocurrence @relation(fields: [ocurrenceId], references: [id])
  student       Student   @relation(fields: [studentId], references: [id])
  
  @@id([studentId, ocurrenceId])
}

enum Levels {
  HIGH
  MEDIUM
  LOW
}

enum Status {
  OPENED
  ASSUMED
  WAITING
  RESOLVED
}